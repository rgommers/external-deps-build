name: Build wheels

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: read # to fetch code (actions/checkout)

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  smoketest:
    # Build only one package per distro, to avoid spinning up a ton of jobs if
    # something simple is broken.
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ["archlinux:latest", "Arch"]
          - ["fedora:39", "Fedora"]
          - ["archlinux:latest", "conda-forge"]
        pkgdata:
          - [cryptography, cryptography]
    runs-on: ubuntu-22.04
    container: ${{ matrix.platform[0] }}
    name: ${{ matrix.pkgdata[0] }}, ${{ matrix.platform[1] }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Install system Python
        run: |
          if [[ ${{ matrix.platform[1] }} == "Fedora" ]]; then
            sudo dnf install -y python  # will install 3.12
          elif [[ ${{ matrix.platform[1] }} == "Arch" ]]; then
            pacman -Syu python sudo --noconfirm # will install 3.11
          elif [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
            source ~/.bashrc
            cp .mambarc ~/.mambarc
            micromamba create -n cfenv python pip  # will install 3.12
          fi

      - name: Download and patch sdist
        run: |
          set -ex
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            python -m venv venv
            source venv/bin/activate
          fi

          python -m pip install pypi_json distro typer rich ./py-show
          python download_and_patch_sdist.py ${{ matrix.pkgdata[0]}}
          ls -alh sdist/
          ls -alh sdist/_amended

      - name: Install external dependencies
        run: |
          set -ex
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          name=${{ matrix.pkgdata[0]}}

          pyshow_args="--sdist-dir=./sdist/_amended"
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            pyshow_args+=" --package-manager=micromamba"
          fi

          py-show --external $name $pyshow_args
          py-show --external --system-install-cmd $name $pyshow_args
          $(py-show --external --system-install-cmd $name $pyshow_args)

      - name: Build from sdist
        run: |
          set -ex
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pip install sdist/_amended/${{ matrix.pkgdata[0] }}-*.tar.gz -v

      - name: Import installed package
        run: |
          set -ex
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi

          python -c "import ${{ matrix.pkgdata[1] }}"

  with_external_metadata:
    needs: smoketest
    if: github.repository == 'rgommers/external-deps-build'
    strategy:
      fail-fast: false
      matrix:
        platform:
          # [container image name, display-name, use-external]
          # use-external=false will have a lot of failures; only uncomment if
          # you're interested in seeing what the current baseline is.
          #- ["archlinux:latest", "Arch", false]  # baseline
          - ["archlinux:latest", "Arch", true]
          - ["fedora:39", "Fedora", true]
          - ["archlinux:latest", "conda-forge", true]
        pkgdata:
          # [package-name, normalized-sdist-name, import-name]
          - [cryptography, cryptography, cryptography]
          - [pyyaml, pyyaml, yaml]  # poor detection of libyaml, falls back to pure Python on conda-forge
          - [lxml, lxml, lxml]    # doesn't work, no pyproject.toml + absolute import in setup.py
          - [greenlet, greenlet, greenlet]
          - [httptools, httptools, httptools]
          - [markupsafe, markupsafe, markupsafe]
          - [grpcio, grpcio, grpc]  # doesn't work, no pyproject.toml + absolute import in setup.py
          - [sqlalchemy, sqlalchemy, sqlalchemy]
          - [wrapt, wrapt, wrapt]
          - [protobuf, protobuf, google.protobuf]
          - [charset-normalizer, charset_normalizer, charset_normalizer]  # falls back to pure Python on conda-forge
          - [pillow, pillow, PIL]
          - [cffi, cffi, cffi]
          - [frozenlist, frozenlist, frozenlist]
          - [multidict, multidict, multidict]
          - [coverage, coverage, coverage]
          - [yarl, yarl, yarl]
          - [aiohttp, aiohttp, aiohttp]  # doesn't build on Python 3.12 yet
          - [psutil, psutil, psutil]
          - [numpy, numpy, numpy]
          - [pandas, pandas, pandas]
          - [scipy, scipy, scipy]  # Failing on Fedora because no auto-detection of FlexiBLAS yet
          - [pyarrow, pyarrow, pyarrow]
          - [pynacl, PyNaCl, nacl]
          - [psycopg2-binary, psycopg2-binary, psycopg2]
          - [rpds-py, rpds_py, rpds]
          - [bcrypt, bcrypt, bcrypt]
          - [scikit-learn, scikit_learn, sklearn]
          - [msgpack, msgpack, msgpack]
          - [matplotlib, matplotlib, matplotlib]  # Failing on conda-forge, missing Freetype symbols.
          - [regex, regex, regex]
          - [kiwisolver, kiwisolver, kiwisolver]
          - [pydantic-core, pydantic_core, pydantic_core]
          - [pyrsistent, pyrsistent, pyrsistent]
          - [grpcio-tools, grpcio_tools, grpc]
          - [pycryptodomex, pycryptodomex, Cryptodome]
          - [google-crc32c, google_crc32c, google_crc32c]
    runs-on: ubuntu-22.04
    container: ${{ matrix.platform[0] }}
    name: ${{ matrix.pkgdata[0] }}, ${{ matrix.platform[1] }}, ${{ matrix.platform[2] }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Install system Python
        run: |
          if [[ ${{ matrix.platform[1] }} == "Fedora" ]]; then
            sudo dnf install -y python  # will install 3.12
          elif [[ ${{ matrix.platform[1] }} == "Arch" ]]; then
            pacman -Syu python sudo --noconfirm # will install 3.11
          elif [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
            source ~/.bashrc
            cp .mambarc ~/.mambarc
            micromamba create -n cfenv python pip  # will install 3.12
          else
            echo 'Unsupported distro!'
          fi

      - name: Download and patch sdist
        if: ${{ matrix.platform[2] }}
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            python -m venv venv
            source venv/bin/activate
          fi

          python -m pip install pypi_json distro typer rich ./py-show
          python download_and_patch_sdist.py ${{ matrix.pkgdata[0]}}
          ls -alh sdist/
          ls -alh sdist/_amended

      - name: Install external dependencies
        if: ${{ matrix.platform[2] }}
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          name=${{ matrix.pkgdata[0]}}

          pyshow_args="--sdist-dir=./sdist/_amended"
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            pyshow_args+=" --package-manager=micromamba"
          fi

          py-show --external $name $pyshow_args
          py-show --external --system-install-cmd $name $pyshow_args
          $(py-show --external --system-install-cmd $name $pyshow_args)

      - name: Build from sdist
        if: ${{ matrix.platform[2] }}
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pip install sdist/_amended/${{ matrix.pkgdata[1] }}-*.tar.gz -v

      - name: Build from PyPI, no external deps
        if: ${{ !matrix.platform[2] }}
        run: |
          python -m venv venv
          source venv/bin/activate
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pip install ${{ matrix.pkgdata[0] }} --no-binary ${{ matrix.pkgdata[0] }} -v

      - name: Import installed package
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi

          python -c "import ${{ matrix.pkgdata[2] }}"
