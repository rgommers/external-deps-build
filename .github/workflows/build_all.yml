name: Build wheels

on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/build_all.yml
      - .github/.mambarc
      - external_metadata/
      - requirements.txt
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: read # to fetch code (actions/checkout)

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  smoketest:
    # Build only one package per distro, to avoid spinning up a ton of jobs if
    # something simple is broken.
    strategy:
      fail-fast: false
      matrix:
        platform:
          # - ["archlinux:latest", "Arch"]
          # - ["fedora:40", "Fedora"]
          # - ["archlinux:latest", "conda-forge"]
          - ["ubuntu:24.04", "Ubuntu"]
        pkgdata:
          - [cryptography, cryptography]
    runs-on: ubuntu-latest
    container: ${{ matrix.platform[0] }}
    name: ${{ matrix.pkgdata[0] }}, ${{ matrix.platform[1] }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Install system Python and git
        run: |
          if [[ ${{ matrix.platform[1] }} == "Fedora" ]]; then
            sudo dnf install -y python  # will install 3.12
          elif [[ ${{ matrix.platform[1] }} == "Arch" ]]; then
            pacman -Syu python sudo --noconfirm # will install 3.11
          elif [[ ${{ matrix.platform[1] }} == "Ubuntu" ]]; then
            apt update
            apt upgrade -y
            apt install -y sudo python3 python-is-python3 python3-venv
          elif [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
            source ~/.bashrc
            cp .github/.mambarc ~/.mambarc
            micromamba create -n cfenv python pip  # will install 3.12
            # we need the micromamba _binary_ (not the shell wrapper) in PATH to install deps
            echo "${HOME}/.local/bin" >> $GITHUB_PATH
          fi

      - name: Download and patch sdist
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            python -m venv venv
            source venv/bin/activate
          fi

          python -m pip install -r requirements.txt
          python -m pyproject_external prepare --out-dir=sdist/_amended ${{ matrix.pkgdata[0]}}
          ls -alh sdist/_amended

      - name: Show external dependencies
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          name=${{ matrix.pkgdata[0]}}

          echo "Raw external metadata:"
          python -m pyproject_external show --output=raw ./sdist/_amended/$name-*.tar.gz
          echo "Mapped external metadata:"
          python -m pyproject_external show --output=mapped ./sdist/_amended/$name-*.tar.gz
          echo "Install command:"
          echo "$(python -m pyproject_external show --output=command ./sdist/_amended/$name-*.tar.gz)"

      - name: Build from sdist
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pyproject_external install sdist/_amended/${{ matrix.pkgdata[0] }}-*.tar.gz

      - name: Import installed package
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi

          python -c "import ${{ matrix.pkgdata[1] }}"

  with_external_metadata:
    needs: smoketest
    if: github.repository == 'rgommers/external-deps-build'
    strategy:
      fail-fast: false
      matrix:
        platform:
          # [container image name, display-name, use-external]
          # use-external=false will have a lot of failures; only uncomment if
          # you're interested in seeing what the current baseline is.
          #- ["archlinux:latest", "Arch", false]  # baseline
          # - ["archlinux:latest", "Arch", true]
          # - ["fedora:40", "Fedora", true]
          # - ["archlinux:latest", "conda-forge", true]
          - ["ubuntu:24.04", "Ubuntu", true]
        pkgdata:
          # [package-name (must be normalized with lowercase and only dashes), import-name]
          - [cryptography, cryptography]
          - [pyyaml, yaml]  # poor detection of libyaml, falls back to pure Python on conda-forge
          - [lxml, lxml]    # doesn't work, no pyproject.toml + absolute import in setup.py
          - [greenlet, greenlet]
          - [httptools, httptools]
          - [markupsafe, markupsafe]
          - [grpcio, grpc]  # doesn't work, no pyproject.toml + absolute import in setup.py
          - [sqlalchemy, sqlalchemy]
          - [wrapt, wrapt]
          - [protobuf, google.protobuf]
          - [charset-normalizer, charset_normalizer]  # falls back to pure Python on conda-forge
          - [pillow, PIL]
          - [cffi, cffi]
          - [frozenlist, frozenlist]
          - [multidict, multidict]
          - [coverage, coverage]
          - [yarl, yarl]
          - [aiohttp, aiohttp]  # doesn't build on Python 3.12 yet
          - [psutil, psutil]
          - [numpy, numpy]
          - [pandas, pandas]
          - [scipy, scipy]  # Failing on Fedora because no auto-detection of FlexiBLAS yet
          - [pyarrow, pyarrow]
          - [pynacl, nacl]
          - [psycopg2-binary, psycopg2]
          - [rpds-py, rpds]
          - [bcrypt, bcrypt]
          - [scikit-learn, sklearn]
          - [msgpack, msgpack]
          - [matplotlib, matplotlib]  # Failing on conda-forge, missing Freetype symbols.
          - [regex, regex]
          - [kiwisolver, kiwisolver]
          - [pydantic-core, pydantic_core]
          - [pyrsistent, pyrsistent]
          - [grpcio-tools, grpc]
          - [pycryptodomex, Cryptodome]
          - [google-crc32c, google_crc32c]
    runs-on: ubuntu-latest
    container: ${{ matrix.platform[0] }}
    name: ${{ matrix.pkgdata[0] }}, ${{ matrix.platform[1] }}, ${{ matrix.platform[2] }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Install system Python
        run: |
          if [[ ${{ matrix.platform[1] }} == "Fedora" ]]; then
            sudo dnf install -y python  # will install 3.12
          elif [[ ${{ matrix.platform[1] }} == "Arch" ]]; then
            pacman -Syu python sudo --noconfirm # will install 3.11
          elif [[ ${{ matrix.platform[1] }} == "Ubuntu" ]]; then
            apt update
            apt upgrade -y
            apt install -y sudo python3 python-is-python3 python3-venv
          elif [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            "${SHELL}" <(curl -L micro.mamba.pm/install.sh)
            source ~/.bashrc
            cp .github/.mambarc ~/.mambarc
            micromamba create -n cfenv python pip  # will install 3.12
            # we need the micromamba _binary_ (not the shell wrapper) in PATH to install deps
            echo "${HOME}/.local/bin" >> $GITHUB_PATH
          else
            echo 'Unsupported distro!'
          fi

      - name: Download and patch sdist
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            python -m venv venv
            source venv/bin/activate
          fi

          python -m pip install -r requirements.txt
          python -m pyproject_external prepare --out-dir=sdist/_amended ${{ matrix.pkgdata[0]}}
          ls -alh sdist/_amended

      - name: Show external dependencies
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          name=${{ matrix.pkgdata[0]}}

          echo "Raw external metadata:"
          python -m pyproject_external show --output=raw ./sdist/_amended/$name-*.tar.gz
          echo "Mapped external metadata:"
          python -m pyproject_external show --output=mapped ./sdist/_amended/$name-*.tar.gz
          echo "Install command:"
          echo "$(python -m pyproject_external show --output=command ./sdist/_amended/$name-*.tar.gz)"

      - name: Build from sdist
        if: ${{ matrix.platform[2] }}
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi
          # Build time patches
          case ${{ matrix.pkgdata[0] }} in
            matplotlib)
              export AR="${GCC_AR:gcc-ar}"
            ;;
          esac
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pyproject_external install sdist/_amended/${{ matrix.pkgdata[0] }}-*.tar.gz

      - name: Build from PyPI, no external deps
        if: ${{ !matrix.platform[2] }}
        run: |
          python -m venv venv
          source venv/bin/activate
          # Dependencies may be installed from wheels, the target package from sdist
          python -m pip install ${{ matrix.pkgdata[0] }} --no-binary ${{ matrix.pkgdata[0] }} -v

      - name: Import installed package
        run: |
          if [[ ${{ matrix.platform[1] }} == "conda-forge" ]]; then
            source ~/.bashrc && micromamba activate cfenv
          else
            source venv/bin/activate
          fi

          python -c "import ${{ matrix.pkgdata[1] }}"
